# We prefer this order semantically, but in fact we
# run test and build jobs simultaneously.
stages:
  - test
  - build
  - deploy
  - sync

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  # We want full history so that "git describe" always works correctly.
  GIT_DEPTH: 0
  FF_ENABLE_BASH_EXIT_CODE_CHECK: "true"
  DOCKER_PIPELINE_IMAGE_NAME: "$CI_REGISTRY_IMAGE/pipeline:$CI_PIPELINE_ID"
  DOCKER_DRIVER: overlay2
  DOCKER_BUILDKIT: "1"
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic"

test_go:
  stage: test

  image: golang:1.19.1-alpine3.15

  before_script:
    - apk --update add make gcc musl-dev git git-lfs
    - git lfs fetch
    - (cd /go; go install gotest.tools/gotestsum@v1.8.2)
    - (cd /go; go install github.com/boumenot/gocover-cobertura@v1.2.0)

  script:
    - mkdir -p dist
    - touch dist/dummy
    - make test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.html
    expire_in: never

  coverage: '/coverage: \d+\.\d+% of statements/'

test_node:
  stage: test

  image: node:16.17-alpine3.15

  before_script:
    - apk --update add git git-lfs
    - git lfs fetch

  script:
    - npm ci --audit=false --audit=false
    - npm run test-ci

  artifacts:
    when: always
    reports:
      junit: tests.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
    paths:
      - coverage/
    exclude:
      - coverage/tmp/
    expire_in: never

  coverage: '/^All files\s+\|\s+\S+\s+\|\s+\S+\s+\|\s+\S+\s+\|\s+\S+\s+\|/'

lint_go:
  stage: test

  image: golang:1.19.1-alpine3.15

  before_script:
    - apk --update add make gcc musl-dev git git-lfs
    - git lfs fetch
    - wget -O- -nv https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.49.0

  script:
    - mkdir -p dist
    - touch dist/dummy
    - make lint-ci

  artifacts:
    when: always
    reports:
      codequality: codeclimate.json
    expire_in: never

lint_node:
  stage: test

  image: node:16.17-alpine3.15

  before_script:
    - apk --update add git git-lfs
    - git lfs fetch

  script:
    - npm ci --audit=false --audit=false
    - npm run lint

lint_vue:
  stage: test

  image: node:16.17-alpine3.15

  before_script:
    - apk --update add git git-lfs
    - git lfs fetch

  script:
    - npm ci --audit=false --audit=false
    - npm run lint-vue

lint_style:
  stage: test

  image: node:16.17-alpine3.15

  before_script:
    - apk --update add git git-lfs
    - git lfs fetch

  script:
    - npm ci --audit=false --audit=false
    - npm run lint-style

fmt_go:
  stage: test

  image: golang:1.19.1-alpine3.15

  before_script:
    - apk --update add make git gcc musl-dev grep git-lfs
    - git lfs fetch
    - go install mvdan.cc/gofumpt@v0.4.0
    - go install golang.org/x/tools/cmd/goimports@v0.1.12

  script:
    - make fmt-ci

fmt_node:
  stage: test

  image: node:16.17-alpine3.15

  before_script:
    - apk --update add git git-lfs
    - git lfs fetch

  script:
    - npm ci --audit=false --audit=false
    - npm run fmt
    - git diff --exit-code --color=always

lint_docs:
  stage: test

  image: node:16.17-alpine3.15

  before_script:
    - apk --update add make git git-lfs
    - git lfs fetch

  script:
    - make lint-docs


audit_go:
  stage: test

  image: golang:1.19.1-alpine3.15

  before_script:
    - apk --update add make git gcc musl-dev git-lfs
    - git lfs fetch
    - go install github.com/sonatype-nexus-community/nancy@v1.0.39

  script:
    - make audit

audit_node:
  stage: test

  image: node:16.17-alpine3.15

  before_script:
    - apk --update add git git-lfs
    - git lfs fetch

  # Signatures audit is done during install in Dockerfile.
  script:
    - npm audit

commits:
  stage: test

  image: golang:1.19.1-alpine3.15

  variables:
    GIT_DEPTH: "0"

  before_script:
    - apk --update add git

  script:
    - '! git log --oneline "-G^(<<<<<<<|=======|>>>>>>>)" | grep "^"'

docker:
  stage: build

  image: docker:20-git

  services:
    - docker:20-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"
    - apk --update add git-lfs
    - git lfs fetch

  script:
    - export BUILD_TIMESTAMP="$(date -u +%FT%TZ)"
    - echo BUILD_TIMESTAMP "$BUILD_TIMESTAMP"
    - export VERSION="$(git describe --tags --always --dirty=+)"
    - echo VERSION "$VERSION"
    - docker build
        --target production
        --tag "$DOCKER_PIPELINE_IMAGE_NAME"
        --tag "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA"
        --build-arg BUILD_TIMESTAMP
        --label "org.opencontainers.image.version=$VERSION"
        --label "org.opencontainers.image.created=$BUILD_TIMESTAMP"
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
        --label "org.opencontainers.image.url=$CI_PROJECT_URL" .
    - docker build
        --target debug
        --tag "$DOCKER_PIPELINE_IMAGE_NAME-debug"
        --tag "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA-debug"
        --build-arg BUILD_TIMESTAMP
        --label "org.opencontainers.image.version=$VERSION"
        --label "org.opencontainers.image.created=$BUILD_TIMESTAMP"
        --label "org.opencontainers.image.revision=$CI_COMMIT_SHA"
        --label "org.opencontainers.image.url=$CI_PROJECT_URL" .
    - docker push "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker push "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA"
    - docker push "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker push "$CI_REGISTRY_IMAGE/commit:$CI_COMMIT_SHA-debug"
    - export IMAGE_ID=$(docker create "$DOCKER_PIPELINE_IMAGE_NAME")
    - docker cp "$IMAGE_ID:/search" peerdb-search-linux-amd64
    - docker rm "$IMAGE_ID"

  artifacts:
    expose_as: binaries
    name: binaries
    paths:
      - peerdb-search-linux-amd64
    expire_in: never

  # We want to run it as soon as possible and do not wait for test stage to finish.
  needs: []

nix:
  stage: build

  image: nixos/nix:2.11.1

  before_script:
    - nix-env -f '<nixpkgs>' -iA nodePackages.node2nix git-lfs gnused
    - git lfs fetch

  script:
    - node2nix --lock package-lock.json --nodejs-16 --composition node.nix --development
    - ./nix-update.sh
    - mkdir nix
    - cp package.json *.nix nix
    - tar czf nix.tgz nix
    - mkdir /tmp/test
    - cp nix.tgz /tmp/test
    - cd /tmp/test
    - nix-build -E "with import <nixpkgs> { }; callPackage (import (fetchTarball file://$(pwd)/nix.tgz)) { }"

  artifacts:
    expose_as: nix
    name: nix
    paths:
      - nix.tgz
    expire_in: never

  # We want to run it as soon as possible and do not wait for test stage to finish.
  needs: []

push_branch:
  stage: deploy

  image: docker:20

  services:
    - docker:20-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  # TODO: Improve so that pulling is not necessary. See: https://gitlab.com/gitlab-org/gitlab/-/issues/15252
  script:
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker push "$CI_REGISTRY_IMAGE/branch/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"

  rules:
    - if: $CI_COMMIT_BRANCH

  # We do not need build artifacts in this job.
  dependencies: []

push_tag:
  stage: deploy

  image: docker:20

  services:
    - docker:20-dind

  before_script:
    - docker info
    - echo "$CI_JOB_TOKEN" | docker login --username gitlab-ci-token --password-stdin "$CI_REGISTRY"

  # TODO: Improve so that pulling is not necessary. See: https://gitlab.com/gitlab-org/gitlab/-/issues/15252
  script:
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker pull "$DOCKER_PIPELINE_IMAGE_NAME-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker tag "$DOCKER_PIPELINE_IMAGE_NAME-debug" "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:latest-debug"
    - docker push "$CI_REGISTRY_IMAGE/tag/$CI_COMMIT_REF_SLUG:$CI_COMMIT_SHA-debug"

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  # We do not need build artifacts in this job.
  dependencies: []

upload_binaries:
  stage: deploy

  image: curlimages/curl:7.80.0

  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file peerdb-search-linux-amd64 "$PACKAGE_REGISTRY_URL/linux-amd64/${CI_COMMIT_REF_NAME#v}/peerdb-search"'

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  dependencies:
    - docker

upload_nix:
  stage: deploy

  image: curlimages/curl:7.80.0

  script:
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file nix.tgz "$PACKAGE_REGISTRY_URL/nix/${CI_COMMIT_REF_NAME#v}/nix.tgz"'

  rules:
    # Only on protected tags. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/'

  dependencies:
    - nix

publish:
  stage: deploy

  image: golang:1.19.1-alpine3.15

  script:
    - GOPROXY=proxy.golang.org go list -m "gitlab.com/peerdb/search@$CI_COMMIT_REF_NAME"

  rules:
    # Only on protected tags on main repository. Protected tags start with "v".
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/ && $CI_PROJECT_PATH == "peerdb/search"'

  # We do not need build artifacts in this job.
  dependencies: []

sync_releases:
  stage: sync

  image:
    name: registry.gitlab.com/tozd/gitlab/release/tag/v0-3-0:latest-debug
    entrypoint: [""]

  script:
    - /gitlab-release

  rules:
    # Protected tags start with "v".
    - if: '$GITLAB_API_TOKEN && ($CI_COMMIT_BRANCH == "main" || ($CI_COMMIT_TAG && $CI_COMMIT_REF_NAME =~ /^v/))'

  # We do not need build artifacts in this job.
  dependencies: []
