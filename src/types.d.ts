import type { BareItem, Key } from "structured-field-values"
import type { NONE } from "@/symbols"

type TranslatableHTMLString = Record<string, string>

type AmountUnit = "@" | "1" | "/" | "kg/kg" | "kg" | "kg/m³" | "m" | "m²" | "m/s" | "V" | "W" | "Pa" | "C" | "J" | "°C" | "rad" | "Hz" | "$" | "B" | "px" | "s"

type TimePrecision = "G" | "100M" | "10M" | "M" | "100k" | "10k" | "k" | "100y" | "10y" | "y" | "m" | "d" | "h" | "min" | "s"

export type RelSearchResult = {
  id: string
  count: number
  type: "rel"
}

export type AmountSearchResult = {
  id: string
  count: number
  type: "amount"
  unit: AmountUnit
}

export type TimeSearchResult = {
  id: string
  count: number
  type: "time"
}

export type StringSearchResult = {
  id: string
  count: number
  type: "string"
}

export type IndexSearchResult = {
  count: number
  type: "index"
}

export type SizeSearchResult = {
  count: number
  type: "size"
}

export type SearchFilterResult = RelSearchResult | AmountSearchResult | TimeSearchResult | StringSearchResult | IndexSearchResult | SizeSearchResult

export type SearchResult = {
  id: string
}

export type RelValuesResult = {
  id: string
  count: number
}

export type AmountValuesResult = {
  min: number
  count: number
}

export type TimeValuesResult = {
  min: string
  count: number
}

export type StringValuesResult = {
  str: string
  count: number
}

export type IndexValuesResult = {
  str: string
  count: number
}

export type SizeValuesResult = {
  min: number
  count: number
}

export type RelFilter = {
  prop: string
  value: string
}

export type RelNoneFilter = {
  prop: string
  none: true
}

export type AmountFilter = {
  prop: string
  unit: string
  gte?: number
  lte?: number
}

export type AmountNoneFilter = {
  prop: string
  unit: string
  none: true
}

export type TimeFilter = {
  prop: string
  gte?: string
  lte?: string
}

export type TimeNoneFilter = {
  prop: string
  none: true
}

export type StringFilter = {
  prop: string
  str: string
}

export type StringNoneFilter = {
  prop: string
  none: true
}

export type IndexFilter = {
  str: string
}

export type SizeFilter = {
  gte?: number
  lte?: number
}

export type SizeNoneFilter = {
  none: true
}

export type Filters =
  | {
      and: Filters[]
    }
  | {
      or: Filters[]
    }
  | {
      not: Filters
    }
  | { rel: RelFilter | RelNoneFilter }
  | { amount: AmountFilter | AmountNoneFilter }
  | { time: TimeFilter | TimeNoneFilter }
  | { str: StringFilter | StringNoneFilter }
  | { index: IndexFilter }
  | { size: SizeFilter | SizeNoneFilter }

export type RelFilterState = (string | typeof NONE)[]

export type AmountFilterState = null | typeof NONE | { gte?: number; lte?: number }

export type TimeFilterState = null | typeof NONE | { gte?: string; lte?: string }

export type StringFilterState = (string | typeof NONE)[]

export type IndexFilterState = string[]

export type SizeFilterState = null | typeof NONE | { gte?: number; lte?: number }

export type FiltersState = {
  rel: Record<string, RelFilterState>
  amount: Record<string, AmountFilterState>
  time: Record<string, TimeFilterState>
  str: Record<string, StringFilterState>
  index: IndexFilterState
  size: SizeFilterState
}

export type ServerSearchState = {
  s: string
  q: string
  p?: string
  filters?: Filters
  promptCall?: object
  promptError?: boolean
}

export type ClientSearchState = {
  s: string
  q: string
  p?: string
  filters?: FiltersState
  promptCall?: object
  promptError?: boolean
}

export type SearchStateCreateResponse = { s: string; q?: string; p?: string }

export type SiteContext = {
  domain: string
  build?: {
    version?: string
    buildTimestamp?: string
    revision?: string
  }
  index: string
  title: string
}

// Symbol is not generated by the server side, but we can easily support it here.
type ItemTypes = BareItem | ItemTypes[]

export type Metadata = Record<Key, ItemTypes>

export type QueryValues = Record<string, string | string[]>

export type QueryValuesWithOptional = Record<string, string | (string | null)[] | undefined | null>

export type StorageBeginUploadRequest = {
  size: number
  mediaType: string
  filename: string
}

export type StorageBeginUploadResponse = {
  session: string
}

export type DocumentCreateResponse = {
  id: string
}

export type DocumentBeginEditResponse = {
  session: string
  version: string
}

export type DocumentEndEditResponse = {
  changeset: string
}

export type DocumentBeginMetadata = {
  at: string
  id: string
  version: string
}

// It is recursive.
export type Mutable<T> = {
  -readonly [k in keyof T]: Mutable<T[k]>
}

// It is not recursive.
type Required<T> = {
  [k in keyof T]-?: T[k]
}

// It is not recursive.
type Optional<T> = {
  [k in keyof T]+?: T[k]
}
